{"version":3,"sources":["data.js","App.js","serviceWorker.js","index.js"],"names":["initialState","list1","id","Math","random","imgUrl","list2","getListStyle","isDraggingOver","background","padding","move","source","destination","droppableSource","droppableDestination","sourceClone","Array","from","destClone","_sourceClone$splice","splice","index","removed","Object","slicedToArray","result","droppableId","App","state","itemsCol1","itemsCol2","id2List","droppable1","droppable2","getList","_this","onDragEnd","result2","setState","_this2","this","react_default","a","createElement","className","react_beautiful_dnd_esm","provided","snapshot","ref","innerRef","style","map","item","key","draggableId","assign","draggableProps","dragHandleProps","alt","src","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a906be0b.chunk.js","sourcesContent":["export const initialState = {\r\n    list1: [\r\n      {id: Math.random(), imgUrl: \"https://upload.wikimedia.org/wikipedia/commons/d/de/Windows_live_square.JPG\"},\r\n      {id: Math.random(), imgUrl: \"https://upload.wikimedia.org/wikipedia/commons/7/71/Weaved_truncated_square_tiling.png\"},\r\n      {id: Math.random(), imgUrl: \"http://5.imimg.com/data5/FC/KN/MY-537032/square-hole-perforated-sheet-250x250.jpg\"},\r\n      {id: Math.random(), imgUrl: \"https://pbs.twimg.com/profile_images/846659478120366082/K-kZVvT8.jpg\"},\r\n      {id: Math.random(), imgUrl: \"https://upload.wikimedia.org/wikipedia/commons/c/c6/Sierpinski_square.jpg\"},\r\n      {id: Math.random(), imgUrl: \"https://upload.wikimedia.org/wikipedia/commons/thumb/1/17/Square-white.svg/2000px-Square-white.svg.png\"},\r\n      {id: Math.random(), imgUrl: \"https://is2-ssl.mzstatic.com/image/thumb/Purple71/v4/6c/31/82/6c3182cd-f718-d550-181f-051f4148a2e4/mzl.qmwzcqcf.png/1200x630bb.jpg\"},\r\n      {id: Math.random(), imgUrl: \"http://www.pricolproperty.com/wp-content/uploads/2015/10/Caledon-Square-Dusky-view5626086ccd4d9-1024x905.jpg\"},\r\n      {id: Math.random(), imgUrl: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSQDVW5GsNRdqdEI7liVuh9JLsyKOMgBKZwRcd96A5S_6iFIBc8Tw\"},\r\n      {id: Math.random(), imgUrl: \"http://www.bhaktigroup.in/upload/image/project/18/safal_square.jpg\"},\r\n      {id: Math.random(), imgUrl: \"https://www.makemytrip.com/travel-guide/media/dg_image/singapore/Parkview-Square-Singapore.jpg\"},\r\n      {id: Math.random(), imgUrl: \"http://jmdgroup.in/wp-content/uploads/2016/07/IMG_20160822_180726-515x400.jpg\"},\r\n      {id: Math.random(), imgUrl: \"http://e4336fa0c208189c0eee-e6761b7f2db36d2d2df00f6c169a70d2.r66.cf1.rackcdn.com/lps/assets/u/who1299ex-178939-W-Union-Square---Exterior.jpg\"},\r\n      {id: Math.random(), imgUrl: \"https://static.wixstatic.com/media/871b06_91f267016e8b4422b10fa7aedf205529.jpg\"},\r\n      {id: Math.random(), imgUrl: \"https://i.pinimg.com/originals/75/be/a9/75bea96bc04e2493167be9810ef3bc8c.jpg\"},\r\n    ],\r\n    list2: [\r\n        \r\n      ]\r\n  }","import React, { Component } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport \"./App.css\";\nimport { initialState } from \"./data\";\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"#563d7b26\" : \"#fff\",\n  padding: 8\n});\n\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\n\nclass App extends Component {\n  state = {\n    itemsCol1: initialState.list1,\n    itemsCol2: initialState.list2\n  };\n  \n  id2List = {\n    droppable1: \"itemsCol1\",\n    droppable2: \"itemsCol2\"\n  };\n\n  getList = id => this.state[this.id2List[id]];\n\n  onDragEnd = result => {\n    const { source, destination } = result;\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId !== destination.droppableId) {\n      const result2 = move(\n        this.getList(source.droppableId),\n        this.getList(destination.droppableId),\n        source,\n        destination\n      );\n\n      this.setState({\n        itemsCol1: result2.droppable1,\n        itemsCol2: result2.droppable2\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <nav className=\"navbar navbar-dark bg-dark text-center\">\n          <span className=\"navbar-brand mb-0 h1 mx-auto\">React Drag And Drop With Responsive Grid Layout</span>\n        </nav>\n        <div className=\"container-fluid\">\n          <DragDropContext onDragEnd={this.onDragEnd}>\n            <div className=\"row my-3\">\n              <Droppable droppableId=\"droppable1\">\n                {(provided, snapshot) => (\n                  <div\n                    className=\"col-lg-6 col-xs-12 pr-2\"\n                    ref={provided.innerRef}\n                  >\n                    <div\n                      className=\"grid-list-container\"\n                      style={getListStyle(snapshot.isDraggingOver)}\n                    >\n                      <ul className=\"actul-img-left\">\n                        {this.state.itemsCol1.map((item, index) => (\n                          <Draggable\n                            key={item.id}\n                            draggableId={item.id}\n                            index={index}\n                          >\n                            {(provided, snapshot) => (\n                              <li\n                                ref={provided.innerRef}\n                                {...provided.draggableProps}\n                                {...provided.dragHandleProps}\n                              >\n                                <img\n                                  alt=\"img-alr\"\n                                  className=\"image-item img-zom\"\n                                  src={item.imgUrl}\n                                />\n                              </li>\n                            )}\n                          </Draggable>\n                        ))}\n                        {provided.placeholder}\n                      </ul>\n                    </div>\n                  </div>\n                )}\n              </Droppable>\n              <Droppable droppableId=\"droppable2\">\n                {(provided, snapshot) => (\n                  <div\n                    className=\"col-lg-6 col-xs-12 pl-2\"\n                    ref={provided.innerRef}\n                  >\n                    <div\n                      className=\"grid-list-container\"\n                      style={getListStyle(snapshot.isDraggingOver)}\n                    >\n                      <ul className=\"row resize-image no-gutters\">\n                        {this.state.itemsCol2.map((item, index) => (\n                          <Draggable\n                            key={item.id}\n                            draggableId={item.id}\n                            index={index}\n                          >\n                            {(provided, snapshot) => (\n                              <li\n                                ref={provided.innerRef}\n                                {...provided.draggableProps}\n                                {...provided.dragHandleProps}\n                                className=\"col-6 col-md-4 col-lg-3\"\n                              >\n                                <img\n                                  alt=\"img-alr\"\n                                  className=\"image-item\"\n                                  src={item.imgUrl}\n                                />\n                              </li>\n                            )}\n                          </Draggable>\n                        ))}\n                        {provided.placeholder}\n                      </ul>\n                    </div>\n                  </div>\n                )}\n              </Droppable>\n            </div>\n          </DragDropContext>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}