{"version":3,"sources":["data.js","App.js","serviceWorker.js","index.js"],"names":["initialState","list1","id","Math","random","imgUrl","list2","getListStyle","isDraggingOver","background","padding","move","source","destination","droppableSource","droppableDestination","sourceClone","Array","from","destClone","_sourceClone$splice","splice","index","removed","Object","slicedToArray","console","log","length","result","droppableId","App","state","itemsCol1","itemsCol2","visible","loading","src","crop","width","height","x","y","id2List","droppable1","droppable2","getList","_this","onDragEnd","result2","setState","onSelectFile","e","target","files","uploadFileToCloudinary","onImageLoaded","image","imageRef","onCropComplete","makeClientCrop","onCropChange","handleOk","blobImgData","handleCancel","this","getCroppedImg","croppedImageUrlData","croppedImageUrl","url","blobData","fileName","_this2","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","getContext","drawImage","Promise","resolve","reject","toBlob","blob","name","window","URL","revokeObjectURL","fileUrl","createObjectURL","error","file","col","arguments","undefined","concat","xhr","XMLHttpRequest","fd","FormData","reactThis","open","setRequestHeader","upload","addEventListener","loaded","total","onreadystatechange","readyState","status","response","JSON","parse","responseText","push","append","send","item","responseType","onload","imageUrl","webkitURL","_this3","_this$state","react_default","a","className","spin","spinning","react_beautiful_dnd_esm","type","onChange","provided","snapshot","ref","innerRef","style","map","key","draggableId","assign","draggableProps","dragHandleProps","onDoubleClick","_handleDoubleClickItem","alt","placeholder","modal","top","title","onOk","onCancel","ReactCrop_default","onComplete","maxWidth","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b77890ee.chunk.js","sourcesContent":["\r\nexport const initialState = {\r\n    list1: [\r\n      {id: Math.random(), imgUrl: `https://res.cloudinary.com/dgxpqt1hz/image/upload/v1556194461/images/14_vequgp.jpg`},\r\n      {id: Math.random(), imgUrl: `https://res.cloudinary.com/dgxpqt1hz/image/upload/v1556194461/images/2_vbawft.jpg`},\r\n      {id: Math.random(), imgUrl: `https://res.cloudinary.com/dgxpqt1hz/image/upload/v1556194460/images/15_nnvnwd.jpg`},\r\n      {id: Math.random(), imgUrl: `https://res.cloudinary.com/dgxpqt1hz/image/upload/v1556194459/images/3_xnfpcj.jpg`},\r\n      {id: Math.random(), imgUrl: `https://res.cloudinary.com/dgxpqt1hz/image/upload/v1556194459/images/4_r4kohf.png`},\r\n      {id: Math.random(), imgUrl: `https://res.cloudinary.com/dgxpqt1hz/image/upload/v1556194459/images/6_d4jdoi.png`},\r\n      {id: Math.random(), imgUrl: `https://res.cloudinary.com/dgxpqt1hz/image/upload/v1556194459/images/8_vabzy6.jpg`},\r\n      {id: Math.random(), imgUrl: `https://res.cloudinary.com/dgxpqt1hz/image/upload/v1556194460/images/12_qkzlkv.jpg`},\r\n      {id: Math.random(), imgUrl: `https://res.cloudinary.com/dgxpqt1hz/image/upload/v1556194460/images/11_acpngt.jpg`},\r\n      {id: Math.random(), imgUrl: `https://res.cloudinary.com/dgxpqt1hz/image/upload/v1556194459/images/7_ygo9ut.jpg`},\r\n      {id: Math.random(), imgUrl: `https://res.cloudinary.com/dgxpqt1hz/image/upload/v1556194459/images/1_uxg2jm.jpg`},\r\n    ],\r\n    list2: [\r\n        \r\n      ]\r\n  }","import React, { Component } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { Modal, Spin } from 'antd';\nimport ReactCrop from \"react-image-crop\";\nimport \"react-image-crop/dist/ReactCrop.css\";\nimport \"./App.css\";\nimport { initialState } from \"./data\";\n\n// Drag And Drop Function\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"#563d7b26\" : \"#fff\",\n  padding: 8\n});\n\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n  console.log(\"destination\", destination.length);\n  destClone.splice(destination.length, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\n\n\nclass App extends Component {\n  state = {\n    itemsCol1: initialState.list1,\n    itemsCol2: initialState.list2,\n    visible: false,\n    loading: false,\n    src: null,\n    crop: {\n      //aspect: 16/9,\n      width: 100,\n      height: 100,\n      x: 50,\n      y: 50\n    }\n  };\n\n  id2List = {\n    droppable1: \"itemsCol1\",\n    droppable2: \"itemsCol2\"\n  };\n\n  getList = id => this.state[this.id2List[id]];\n\n  onDragEnd = result => {\n    const { source, destination } = result;\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId !== destination.droppableId) {\n      const result2 = move(\n        this.getList(source.droppableId),\n        this.getList(destination.droppableId),\n        source,\n        destination\n      );\n\n      this.setState({\n        itemsCol1: result2.droppable1,\n        itemsCol2: result2.droppable2\n      });\n    }\n  };\n\n  // Images Crop Function\n  onSelectFile = e => {\n    if (e.target.files && e.target.files.length > 0) {\n      this.uploadFileToCloudinary(e.target.files[0],\"droppable1\");\n    }\n  };\n  onImageLoaded = (image, crop) => {\n    this.imageRef = image;\n  };\n\n  onCropComplete = crop => {\n    console.log(crop);\n    this.makeClientCrop(crop);\n  };\n\n  onCropChange = crop => {\n    this.setState({ crop });\n  };\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      const croppedImageUrlData = await this.getCroppedImg(\n        this.imageRef,\n        crop,\n        \"newFile.jpeg\"\n      );\n      \n      this.setState({ croppedImageUrl: croppedImageUrlData.url, blobImgData: croppedImageUrlData.blobData });\n    }\n  }\n\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement(\"canvas\");\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext(\"2d\");\n\n    ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width,\n      crop.height\n    );\n\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error(\"Canvas is empty\");\n          return;\n        }\n        blob.name = fileName;\n        window.URL.revokeObjectURL(this.fileUrl);\n        this.fileUrl = window.URL.createObjectURL(blob);\n        resolve({ url: this.fileUrl, blobData: blob });\n      }, \"image/jpeg\");\n    });\n  }\n  //Modal Pops Functions\n  handleOk = (e) => {\n    this.uploadFileToCloudinary(this.state.blobImgData,\"droppable2\");\n  }\n  handleCancel = (e) => {\n    console.log(e);\n    this.setState({\n      visible: false,\n    });\n  }\n\n  //Upload To cloudinary\n  uploadFileToCloudinary(file,col=\"droppable1\") {\n    const cloudName = 'dgxpqt1hz';\n    const unsignedUploadPreset = 'ml_default';\n    const url = `https://api.cloudinary.com/v1_1/${cloudName}/upload`;\n    let xhr = new XMLHttpRequest();\n    let fd = new FormData();\n    let reactThis = this;\n    this.setState({ loading: true });\n    xhr.open('POST', url, true);\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n\n    // Update progress (can be used to show progress indicator)\n    xhr.upload.addEventListener(\"progress\", function (e) {\n      console.log(`fileuploadprogress data.loaded: ${e.loaded},data.total: ${e.total}`);\n    });\n\n    xhr.onreadystatechange = function (e) {\n      if (xhr.readyState === 4 && xhr.status === 200) {\n        // File uploaded successfully\n        var response = JSON.parse(xhr.responseText);\n        if (response.url) {\n          reactThis.state[reactThis.id2List[col]].push({ id: Math.random(), imgUrl: response.url });\n          reactThis.setState({\n            visible: false,\n            loading: false,\n          });\n        }\n      }\n    };\n    fd.append('upload_preset', unsignedUploadPreset);\n    fd.append('tags', 'browser_upload'); // Optional - add tag for image admin in Cloudinary\n    fd.append('file', file);\n    fd.append('folder', 'images');\n    xhr.send(fd);\n  }\n\n  _handleDoubleClickItem(item) {\n    console.log('I got double-clicked!', item);\n    let reactThis = this;\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", item.imgUrl);\n    xhr.responseType = \"blob\";\n    xhr.onload = function (e) {\n      var urlCreator = window.URL || window.webkitURL;\n      var imageUrl = urlCreator.createObjectURL(this.response);\n      console.log(\"imageUrl\", imageUrl);\n      reactThis.setState({ src: imageUrl, croppedImageUrl:\"\", visible: true })\n    };\n    xhr.send();\n  }\n\n  render() {\n    const { crop, croppedImageUrl, src } = this.state;\n    return (\n      <div className=\"App\">\n        <nav className=\"navbar navbar-dark bg-dark text-center\">\n          <span className=\"navbar-brand mb-0 h1 mx-auto\">React Drag And Drop With Responsive Grid Layout (React Beautiful DND)</span>\n        </nav>\n        <Spin spinning={this.state.loading}>\n          <div className=\"container-fluid\">\n            <DragDropContext onDragEnd={this.onDragEnd}>\n              <div className=\"row mt-2\">\n                <div className=\"col-lg-12 col-xs-12 mb-2\">\n                  <div className=\"file-up btn btn-outline-primary\">\n                    Add New Image\n                    <input type=\"file\" onChange={this.onSelectFile} />\n                  </div>\n                  {/* <input type=\"file\" onChange={this.onSelectFile} /> */}\n                </div>\n                <Droppable droppableId=\"droppable1\">\n                  {(provided, snapshot) => (\n                    <div\n                      className=\"col-lg-6 col-xs-12 pr-2\"\n                      ref={provided.innerRef}\n                    >\n\n                      <div\n                        className=\"grid-list-container\"\n                        style={getListStyle(snapshot.isDraggingOver)}\n                      >\n                        <ul className=\"actul-img-left\">\n                          {this.state.itemsCol1.map((item, index) => (\n                            <Draggable\n                              key={item.id}\n                              draggableId={item.id}\n                              index={index}\n                            >\n                              {(provided, snapshot) => (\n                                <li\n                                  ref={provided.innerRef}\n                                  {...provided.draggableProps}\n                                  {...provided.dragHandleProps}\n                                  onDoubleClick={() => this._handleDoubleClickItem(item)}\n                                >\n                                  <img\n                                    alt=\"img-alr\"\n                                    className=\"image-item img-zom\"\n                                    src={item.imgUrl}\n                                  />\n                                </li>\n                              )}\n                            </Draggable>\n                          ))}\n                          {provided.placeholder}\n                        </ul>\n                      </div>\n                    </div>\n                  )}\n                </Droppable>\n                <Droppable droppableId=\"droppable2\">\n                  {(provided, snapshot) => (\n                    <div\n                      className=\"col-lg-6 col-xs-12 pl-2\"\n                      ref={provided.innerRef}\n                    >\n                      <div\n                        className=\"grid-list-container\"\n                        style={getListStyle(snapshot.isDraggingOver)}\n                      >\n                        <ul className=\"row resize-image no-gutters\">\n                          {this.state.itemsCol2.map((item, index) => (\n                            <Draggable\n                              key={item.id}\n                              draggableId={item.id}\n                              index={index}\n                            >\n                              {(provided, snapshot) => (\n                                <li\n                                  ref={provided.innerRef}\n                                  {...provided.draggableProps}\n                                  {...provided.dragHandleProps}\n                                  className=\"col-6 col-md-5 col-lg-4\"\n                                >\n                                  <img\n                                    alt=\"img-alr\"\n                                    className=\"image-item\"\n                                    src={item.imgUrl}\n                                  />\n                                </li>\n                              )}\n                            </Draggable>\n                          ))}\n                          {provided.placeholder}\n                        </ul>\n                      </div>\n                    </div>\n                  )}\n                </Droppable>\n              </div>\n            </DragDropContext>\n          </div>\n        </Spin>\n        <Modal\n          visible={this.state.visible}\n          style={{ top: 17 }}\n          title=\"Crop Image\"\n          onOk={this.handleOk}\n          width={1200}\n          onCancel={this.handleCancel}\n        >\n          <div className=\"row\">\n            <div className=\"col-lg-6 col-xs-12 crop-ele d-flex justify-content-center align-items-center\">\n              {src && (\n                <ReactCrop\n                  src={src}\n                  crop={crop}\n                  onImageLoaded={this.onImageLoaded}\n                  onComplete={this.onCropComplete}\n                  onChange={this.onCropChange}\n                />\n              )}\n            </div>\n            <div className=\"col-lg-6 col-xs-12 preview-ele d-flex justify-content-center align-items-center\">\n              {croppedImageUrl && (\n                <img alt=\"Crop\" style={{ maxWidth: \"100%\", width: \"80%\" }} src={croppedImageUrl} />\n              )}\n            </div>\n          </div>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}